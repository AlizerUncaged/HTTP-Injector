/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package respite.http.injector;

import com.bulenkov.darcula.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.*;
import java.awt.Color;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.net.URL;
import java.net.URLConnection;
import java.util.Base64;
import java.nio.charset.StandardCharsets;
import java.util.Scanner;
import java.util.logging.Handler;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.UnsupportedLookAndFeelException;
import java.awt.Dimension;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import javax.swing.JOptionPane;
import java.io.FileFilter;
import java.io.FileReader;
import java.io.FileWriter;
import java.net.URI;
import java.time.LocalDateTime;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.util.concurrent.ThreadLocalRandom;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JRadioButton;
import javax.swing.JTextField;
import javax.swing.JTextPane;
import javax.swing.UIManager;
import javax.swing.plaf.basic.BasicLookAndFeel;
import javax.swing.text.AttributeSet;
import javax.swing.text.DefaultCaret;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import javax.swing.text.StyledDocument;
import respite.http.injector.SavedData;
import respiteinjector.Injector;

/**
 *
 * @author user
 */
public class MainForm extends javax.swing.JFrame {

    /**
     * Creates new form MainForm
     */
    public MainForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jTextField2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jTextField9 = new javax.swing.JTextField();
        jPasswordField1 = new javax.swing.JPasswordField();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel15 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextPane3 = new javax.swing.JTextPane();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextPane2 = new javax.swing.JTextPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(51, 0, 51));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setPreferredSize(new java.awt.Dimension(475, 379));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Proxy (HTTP/s):");
        jLabel1.setToolTipText("");

        jTextPane1.setBorder(null);
        jTextPane1.setFont(new java.awt.Font("Monospac821 BT", 0, 12)); // NOI18N
        jTextPane1.setText("CONNECT [host_port] HTTP/1.0[crlf][crlf]");
        jTextPane1.setToolTipText("Go to Edit > Payload Generator to generate a payload.");
        jScrollPane1.setViewportView(jTextPane1);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Payload:");

        jButton1.setForeground(new java.awt.Color(123, 237, 159));
        jButton1.setText("Connect");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Clicke(evt);
            }
        });

        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("Host:Port");
        jLabel14.setToolTipText("");

        jButton2.setText("Generate Payload");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ShowPayloadGenerator(evt);
            }
        });

        jButton3.setText("View Parsed");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ViewPayload(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 467, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField1)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addGap(12, 12, 12))
        );

        jLabel1.getAccessibleContext().setAccessibleName("");

        jTabbedPane1.addTab("           Home           ", jPanel1);

        jTextField2.setText("22");
        jTextField2.setToolTipText("");

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Port:");
        jLabel3.setToolTipText("");

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Host:");
        jLabel4.setToolTipText("");

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Username:");
        jLabel5.setToolTipText("");

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Password:");
        jLabel6.setToolTipText("");

        jLabel7.setText("Local Proxy Interface:");
        jLabel7.setToolTipText("");

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("SSH Server Settings:");
        jLabel8.setToolTipText("");

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Host:");
        jLabel9.setToolTipText("");

        jTextField6.setText("127.0.0.1");

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Port:");
        jLabel10.setToolTipText("");

        jTextField7.setText("5085");
        jTextField7.setToolTipText("");

        jLabel11.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel11.setText("*set your system proxy to these ports with 127.0.0.1 as host");
        jLabel11.setToolTipText("");

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("SOCKS");
        jLabel12.setToolTipText("");

        jTextField9.setText("8080");
        jTextField9.setToolTipText("");

        jCheckBox1.setSelected(true);
        jCheckBox1.setText("Enable");

        jLabel15.setText("Local SSH Forwarding Interface:");
        jLabel15.setToolTipText("");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
            .addGroup(javax.swing.GroupLayout.Alignment.CENTER, jPanel2Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jCheckBox1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(12, 12, 12))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField4)))
                .addContainerGap(12, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addContainerGap(151, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPasswordField1)
                        .addGap(12, 12, 12))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("SSH Settings", jPanel2);

        jTextPane3.setEditable(false);
        jScrollPane4.setViewportView(jTextPane3);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Logs", jPanel3);

        jTextPane2.setEditable(false);
        jTextPane2.setBorder(null);
        jTextPane2.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jTextPane2.setText("Respite HTTP Injector");
        jTextPane2.setToolTipText("G to Edit > Payload Generator to generate a payload.");
        jScrollPane3.setViewportView(jTextPane2);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 467, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("About", jPanel4);

        jMenu2.setText("File");

        jMenuItem5.setText("Open Config");
        jMenu2.add(jMenuItem5);

        jMenuItem6.setText("Export Config");
        jMenu2.add(jMenuItem6);

        jMenuItem3.setText("Exit");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Edit");

        jMenuItem4.setText("Payload Generator");
        jMenuItem4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ShowPayloadGenerator(evt);
            }
        });
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem4);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 355, Short.MAX_VALUE)
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName("Home");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem3ActionPerformed
    static PayloadGenerator payG = null;
    private void ShowPayloadGenerator(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ShowPayloadGenerator
        ShowPayload();
    }//GEN-LAST:event_ShowPayloadGenerator
    public String ParsePayload(String payload) {
        return payload
                .replace("[realData]", "CONNECT [host_port] [protocol]")
                .replace("[host_port]", mainForm.jTextField3.getText().trim() + ":" + mainForm.jTextField2.getText().trim())
                .replace("[host]", mainForm.jTextField3.getText().trim())
                .replace("[port]", mainForm.jTextField2.getText().trim())
                .replace("[lfcr]", "\n\r")
                .replace("[lf]", "\n")
                .replace("[cr]", "\r")
                .replace("[method]", payG.GetMethod())
                .replace("[protocol]", "HTTP/1.0")
                .replace("[crlf]", "\r\n")
                .replace("\\n", "\n")
                .replace("\\r", "\r");
    }
    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed

        ShowPayload();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        try {
            VerifyPayload();
            if (injector != null) {
                injector.stop();
            }
        } catch (Exception jh) {
        }
        System.out.println("Closing.");
        SaveData();
    }//GEN-LAST:event_formWindowClosing
    boolean ShowingRealPayload = false;
    private void ViewPayload(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ViewPayload
        if (!ShowingRealPayload) {
            SaveData();
            mainForm.jButton3.setText("View Placeholders");
            mainForm.jTextPane1.setText(ParsePayload(mainForm.jTextPane1.getText()) + "\n----END OF HTTP HEADERS----");

        } else {
            mainForm.jButton3.setText("View Parsed");
            mainForm.jTextPane1.setText(JsonData.Payload);
        }
        mainForm.jTextPane1.setEnabled(ShowingRealPayload);
        ShowingRealPayload = !ShowingRealPayload;
    }//GEN-LAST:event_ViewPayload
    SSHCon sshcon;
    private void Clicke(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Clicke
        try {
            if (!isConnected) {
                Log("> Clicked Connect", 0);
                try {
                    VerifyPayload();
                } catch (Exception exx) {
                }
                injector = new Injector(mainForm.jTextField6.getText(), Integer.parseInt(mainForm.jTextField7.getText()), mainForm.jTextField1.getText().split(":")[0], Integer.parseInt(mainForm.jTextField1.getText().split(":")[1])) {
                    public void onLogReceived(String log, int level, Exception e) {
                        System.out.print(log);
                    }
                };
                jButton1.setForeground(new java.awt.Color(255, 102, 102));
                mainForm.jButton1.setText("Disconnect");
                injector.setPayload(ParsePayload(mainForm.jTextPane1.getText()));
                InjectorThread = new Thread(injector);
                InjectorThread.start();
                mainForm.jTabbedPane1.setSelectedIndex(2);
                if (mainForm.jCheckBox1.isSelected()) {
                    new Thread(new Runnable() {
                        public void run() {
                            sshcon = new SSHCon(
                                    mainForm.jTextField3.getText(),
                                    Integer.parseInt(mainForm.jTextField2.getText()),
                                    mainForm.jTextField4.getText(),
                                    new String(mainForm.jPasswordField1.getPassword()),
                                    mainForm.jTextField6.getText(),
                                    Integer.parseInt(mainForm.jTextField7.getText()),
                                    Integer.parseInt(mainForm.jTextField9.getText())
                            );
                            sshcon.run();
                        }
                    }).start();

                } else {
                    Log("> SSH mode is disabled, you can use this as HTTP proxy to any VPN program.", 0);
                }
            } else {
                Log("> Clicked Disconnect", 0);
                jButton1.setForeground(new java.awt.Color(123, 237, 159));
                mainForm.jButton1.setText("Connect");
                new Thread(new Runnable() {
                    public void run() {
                        try {
                            sshcon.close();
                        } catch (Exception exx) {
                        }
                        try {
                            injector.stop();
                            InjectorThread.stop();
                        } catch (Exception exx) {
                        }
                    }
                }).start();

            }
            isConnected = !isConnected;        // TODO add your handling code here:
        } catch (java.lang.ArrayIndexOutOfBoundsException ex) {
            JOptionPane.showMessageDialog(this,
                    ex.getLocalizedMessage() + "\n" + ex.getMessage() + "\n" + ex.toString() + "\nPlease check your configurations (proxy)...",
                    "An error occured!",
                    JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this,
                    ex.getLocalizedMessage() + "\n" + ex.getMessage() + "\n" + ex.toString() + "\nPlease check your configurations...",
                    "An error occured!",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_Clicke
    public void VerifyPayload() {
        if (ShowingRealPayload) {
            try {
                mainForm.jTextPane1.setEnabled(true);
                mainForm.jButton3.setText("View Parsed");
                mainForm.jTextPane1.setText(JsonData.Payload);
                ShowingRealPayload = !ShowingRealPayload;
            } catch (Exception ex) {
            }
        }
    }
    boolean isConnected = false;
    public static Thread InjectorThread;
    public static Injector injector;
    public static MainForm mainForm;
    public static SavedData JsonData = new SavedData();

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        if (args.length <= 0 || args[0] == "--no-ui") {
            try {
                boolean themeFound = false;
                BasicLookAndFeel darcula = new DarculaLaf();
                UIManager.setLookAndFeel(darcula);
            } catch (Exception ex) {
            }

            //</editor-fold>
            /* Create and display the form */
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    mainForm = new MainForm();
                    mainForm.setResizable(false);
                    mainForm.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("download.png")));
                    Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();
                    int x = (int) ((dimension.getWidth() - mainForm.getWidth()) / 2);
                    int y = (int) ((dimension.getHeight() - mainForm.getHeight()) / 2);
                    try {
                        ReadData();
                    } catch (Exception ex) {
                    }
                    mainForm.setLocationRelativeTo(null);
                    mainForm.setLocation(x, y);
                    mainForm.setPreferredSize(new Dimension(477, 335));
                    mainForm.setTitle("Respite VPN v" + String.valueOf(JsonData.Version));
                    mainForm.jTextPane2.setText("\t\tRespite HTTP Injector v" + String.valueOf(JsonData.Version) + "\r\n"
                            + "Made by Alizer for multi platform in Java 8\n"
                            + "Replaces HTTP connect headers with your custom headers to bypass ISP firewalls.\n"
                            + "> Links:\n"
                            + "\tKeybase: keybase.io/ranamgi\n"
                            + "\tYoutube: www.youtube.com/channel/UCTtA84Gb2StiefbZfCx9i6A/\n"
                            + "\tGitHub: github.com/Alizer55/respite-http-injector\n"
                            + "> How to use: \n"
                            + "After setting up your SSH Settings and payload set the proxy option of your applications to the Local SSH Forwarding interface as SOCKSv5 to redirect all requests to this application.\n"
                            + "> Free SSH Hosting Services: \n"
                            + "\twww.tcpvpn.com - Recommended\n"
                            + "\tfastssh.com\n"
                            + "\tsshstores.net");
                    try {
                        Log("Respite HTTP Injector started " + ZonedDateTime.now().format(DateTimeFormatter.RFC_1123_DATE_TIME)
                                + "\nOS Name: " + System.getProperty("os.name")
                                + " JRE: " + System.getProperty("java.version") + " " + System.getProperty("os.arch"), 1);
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(null, ex.toString(), "An error occured.", JOptionPane.ERROR_MESSAGE);
                    }
                    Log("Press Ctrl A then Ctrl C to copy this log.", 3);
                    ShowPayload(false);
                    try {
                        UpdateIP();
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(null, ex.toString(), "An error occured.", JOptionPane.ERROR_MESSAGE);
                    }
                    mainForm.setVisible(true);
                    CheckUpdates();
                }
            });
        }
    }

    public static String getBetweenStrings(
            String text,
            String textFrom,
            String textTo) {

        String result = "";

        // Cut the beginning of the text to not occasionally meet a      
        // 'textTo' value in it:
        result
                = text.substring(
                        text.indexOf(textFrom) + textFrom.length(),
                        text.length());

        // Cut the excessive ending of the text:
        result
                = result.substring(
                        0,
                        result.indexOf(textTo));

        return result;
    }

    public static void CheckUpdates() {
        new Thread(new Runnable() {
            public void run() {
                try {
                    String out = new Scanner(new URL("https://pastebin.com/raw/LAU2h0rY").openStream(), "UTF-8").useDelimiter("\\A").next();
                    double version = Double.parseDouble(getBetweenStrings(out, "<javRes>", "</javRes>"));
                    System.out.println("This version: " + String.valueOf(JsonData.Version) + " new version: " + String.valueOf(version));
                    if (JsonData.Version < version) {
                        int dialogButton = JOptionPane.YES_NO_OPTION;
                        int dialogResult = JOptionPane.showConfirmDialog(null, getBetweenStrings(out, "<javDesc>", "</javDesc>") + "\nWould you like to download new update?", "New Update!", dialogButton);
                        if (dialogResult == JOptionPane.YES_OPTION) {
                            if (Desktop.getDesktop().isSupported(Desktop.Action.BROWSE)) {
                                Desktop.getDesktop().browse(new URI(getBetweenStrings(out, "<javO>", "</javO>")));
                            }
                        }
                    }
                } catch (Exception ex) {
                }
            }
        }).start();
    }

    public static void SaveData() {
        try {
            ObjectMapper ow = new ObjectMapper();
            JsonData.Payload = mainForm.jTextPane1.getText();
            JsonData.Proxy = mainForm.jTextField1.getText();
            JsonData.SSH_Host = mainForm.jTextField3.getText();
            JsonData.SSH_Port = mainForm.jTextField2.getText();
            JsonData.SSH_Username = mainForm.jTextField4.getText();
            JsonData.SSH_Password = new String(mainForm.jPasswordField1.getPassword());
            JsonData.LocalProxyInterface_Host = mainForm.jTextField6.getText();
            JsonData.LocalProxyInterface_Port = mainForm.jTextField7.getText();
            JsonData.LocalSSHInterface_Port = mainForm.jTextField9.getText();
            JsonData.AllowSSH = mainForm.jCheckBox1.isSelected();
            Component[] comps = payG.GetParent().getComponents();
            for (int i = 0; i < comps.length; i++) {
                try {
                    Component component = comps[i];
                    if (component instanceof JCheckBox) {
                        JCheckBox checkbox = (JCheckBox) component;
                        JsonData.PayloadCheckBoxes.put(checkbox.getText(), checkbox.isSelected());
                    }

                    if (component instanceof JRadioButton) {
                        JRadioButton checkbox = (JRadioButton) component;
                        JsonData.RadioButtons.put(checkbox.getText(), checkbox.isSelected());
                    }
                    if (component instanceof JTextField) {

                        JTextField checkbox = (JTextField) component;
                        JsonData.TextFields.put(checkbox.getName(), checkbox.getText());
                    }
                    if (component instanceof JComboBox) {
                        JComboBox checkbox = (JComboBox) component;
                        JsonData.Comboboxes.put(checkbox.getName(), checkbox.getSelectedIndex());
                    }
                } catch (Exception ex) {
                }
            }
            String json = ow.writeValueAsString(JsonData);
            File myObj = new File("user.data");
            if (myObj.createNewFile()) {
                System.out.println("File created: " + myObj.getName());
            } else {
                System.out.println("File already exists.");
            }
            FileWriter myWriter = new FileWriter("user.data");
            myWriter.write(json);
            myWriter.close();
        } catch (Exception ex) {
        }
    }

    public static void ReadData() {
        try {
            FileReader fr = new FileReader("user.data");
            int l = 0;
            String h = "";
            while (l != -1) {
                l = fr.read();
                char i = (char) l;
                h += i;
            }
            System.out.println(h);
            System.out.println("Finished reading json.");
            ObjectMapper ow = new ObjectMapper();
            JsonData = ow.readValue(h, JsonData.getClass());
            mainForm.jTextPane1.setText(JsonData.Payload);
            mainForm.jTextField1.setText(JsonData.Proxy);
            mainForm.jTextField3.setText(JsonData.SSH_Host);
            mainForm.jTextField2.setText(JsonData.SSH_Port);
            mainForm.jTextField4.setText(JsonData.SSH_Username);
            mainForm.jPasswordField1.setText(JsonData.SSH_Password);
            mainForm.jTextField6.setText(JsonData.LocalProxyInterface_Host);
            mainForm.jTextField7.setText(JsonData.LocalProxyInterface_Port);
            mainForm.jTextField9.setText(JsonData.LocalSSHInterface_Port);
            mainForm.jCheckBox1.setSelected(JsonData.AllowSSH);
        } catch (Exception ex) {
            System.out.println("Read Ex: " + ex);
        }
    }

    public static void ShowPayload() {
        ShowPayload(true);
    }

    public static void ShowPayload(boolean showR) {
        if (payG == null) {
            payG = new PayloadGenerator();
            payG.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
            payG.addWindowListener(new WindowAdapter() {
                public void windowClosing(WindowEvent e) {
                    payG.setVisible(false);
                }
            });
            payG.Me = payG;
            payG.Parent = mainForm;
            payG.setIconImage(Toolkit.getDefaultToolkit().getImage(mainForm.getClass().getResource("download.png")));
            payG.setTitle("Payload Generator");
            Component[] comps = payG.GetParent().getComponents();
            for (int i = 0; i < comps.length; i++) {
                try {
                    Component component = comps[i];
                    if (component instanceof JCheckBox) {
                        JCheckBox checkbox = (JCheckBox) component;
                        checkbox.setSelected((boolean) JsonData.PayloadCheckBoxes.get(checkbox.getText()));
                    }
                    if (component instanceof JRadioButton) {
                        JRadioButton checkbox = (JRadioButton) component;
                        checkbox.setSelected((boolean) JsonData.RadioButtons.get(checkbox.getText()));
                    }
                    if (component instanceof JTextField) {

                        JTextField checkbox = (JTextField) component;
                        checkbox.setText((String) JsonData.TextFields.get(checkbox.getName()));
                        // JsonData.TextFields.put(checkbox.getText(), checkbox.getName());
                    }
                    if (component instanceof JComboBox) {

                        JComboBox checkbox = (JComboBox) component;
                        checkbox.setSelectedIndex((Integer) JsonData.Comboboxes.get(checkbox.getName()));
                        // JsonData.TextFields.put(checkbox.getText(), checkbox.getName());
                    }
                } catch (Exception ex) {
                }
            }
        }
        payG.setVisible(showR);
        payG.setLocation(mainForm.location());
    }

    public static int RandomInt() {
        return ThreadLocalRandom.current().nextInt(1, 65536);
    }

    public static void FromUI(Runnable voidp) {
        java.awt.EventQueue.invokeLater(voidp);
    }

    public static void UpdateIP() {
//        new Thread(new Runnable() {
//            public void run() {
//                try {
//                    FromUI(new Runnable() {
//                        public void run() {
//                            // mainForm.jLabel16.setText("Fetching IP Address...");
//                        }
//                    });
//                    String ip = ReadPage("http://api.ipify.org");
//                    FromUI(new Runnable() {
//                        public void run() {
//                            if (ip != null && ip.length() <= 18) {
//                                // mainForm.jLabel16.setText("IP: " + ip.trim());
//                            } else {
//                                // mainForm.jLabel16.setText("Failed fetching IP Address.");
//                            }
//                        }
//                    });
//                } catch (Exception ex) {
//
//                }
//            }
//        }).start();
    }

    public static String ReadPage(String surl) {
        try {
            URL url = new URL(surl);
            URLConnection con = url.openConnection();
            InputStream in = con.getInputStream();
            String encoding = con.getContentEncoding();
            encoding = encoding == null ? "UTF-8" : encoding;

            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            byte[] buf = new byte[8192];
            int len = 0;
            while ((len = in.read(buf)) != -1) {
                baos.write(buf, 0, len);
            }
            String body = new String(baos.toByteArray(), encoding);
            return body;
        } catch (Exception ex) {
        }
        return null;
    }

    public static String Base64Encode(String enc) {
        return Base64.getEncoder().encodeToString(enc.getBytes());
    }

    public static String Base64Decode(String dec) {
        return new String(Base64.getDecoder().decode(dec), StandardCharsets.UTF_8);
    }

    public void SetPayload(String payload) {
        mainForm.jTextPane1.setText(payload);
        VerifyPayload();
    }

    public static void Log(String message, int verb) {
        if (!message.isEmpty()) {
            String log = "";
            switch (verb) {
                /*   case 2:
                    log+= "[+++] ";
                    break;
                case 1:
                    log+= "[+] ";
                    break;
                case 0:
                    log+= "[#] ";
                    break;
                case -1:
                    log+= "[x] ";
                    break;*/
            }

            log += message + "\n";
            System.out.print(log);
            if (verb == 2) {
                appendToPane(mainForm.jTextPane3, log, new java.awt.Color(51, 255, 153));
            } else if (verb == 1) {
                appendToPane(mainForm.jTextPane3, log, new java.awt.Color(123, 237, 159));
            } else if (verb == 3) {
                appendToPane(mainForm.jTextPane3, log, Color.GRAY);
            } else if (verb <= -1) {

                appendToPane(mainForm.jTextPane3, log, new java.awt.Color(255, 102, 102));
            } else if (log.contains("[SSH]")) {
                appendToPane(mainForm.jTextPane3, log, new java.awt.Color(153, 255, 255));
            } else {
                appendToPane(mainForm.jTextPane3, log, Color.LIGHT_GRAY);
            }
            // mainForm.jTextPane3.append(log);
            mainForm.jTextPane3.setCaretPosition(mainForm.jTextPane3.getDocument().getLength());
        }
    }

    private static void appendToPane(JTextPane tp, String msg, Color c) {
        StyleContext sc = StyleContext.getDefaultStyleContext();
        AttributeSet aset = sc.addAttribute(SimpleAttributeSet.EMPTY, StyleConstants.Foreground, c);

        aset = sc.addAttribute(aset, StyleConstants.FontFamily, "Lucida Console");
        aset = sc.addAttribute(aset, StyleConstants.FontSize, 11);
        aset = sc.addAttribute(aset, StyleConstants.Alignment, StyleConstants.ALIGN_JUSTIFIED);

        int len = tp.getDocument().getLength();
        tp.setCaretPosition(len);
        tp.setCharacterAttributes(aset, false);
        tp.setEditable(true);
        tp.replaceSelection(msg);
        tp.setEditable(false);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField9;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextPane jTextPane2;
    private javax.swing.JTextPane jTextPane3;
    // End of variables declaration//GEN-END:variables
}
